import java.util.*;

//Authors: Azaria Adhanom & Ahmed Nawaz
//Date: May 20 2025

//Given an undirected graph, you are required to create its corresponding adjacency list using the
//Graph implementation above and print its vertices using Breadth First Search [ BFS ] and Depth
//First Search [ DFS ]. 

//"Undirected Graph" means that the graph is connected, does not contain a cycle and has n-1 edges (always one less edge than vertex)
//Use a linked list as it is dynamic in size and does not allocate unused space

public class GraphLab1 {
    private int vertices;//int for the vertices
    private LinkedList<Integer>[] adjList;//integer that stores the adjacent vertices

    // Constructor
    public GraphLab1(int v) {
        this.vertices = v;
        adjList = new LinkedList[v];
        for (int i = 0; i < v; i++) { 
            adjList[i] = new LinkedList<>();
        }
    }

    // Add an edge (undirected)
    //Since it is an undirected graph, you have to add the edge in both directions
    public void addEdge(int a, int b) {
        adjList[a].add(b);
        adjList[b].add(a);
    }

    // Compute the degree of a vertex
    //returns the # of neighbours for a given vertex
    public int degreeVertex(int a) {
        return adjList[a].size();//
    }

    // Print adjacent vertices (connected to one another)
    public void printAdjVertices(int a) {
        System.out.print("Adjacent to " + a + ": ");
        for (int v : adjList[a]) {
            System.out.print(v + " ");
        }
        System.out.println();
    }

    // BFS traversal
    public void BFS(int start) {
        boolean[] visited = new boolean[vertices];//prevent revisiting same nodes
        Queue<Integer> queue = new LinkedList<>();//keeps track of verticies to visit in order

        visited[start] = true;//mark the starting vertex as visited so we don't reprocess it
        queue.add(start);

        System.out.print("BFS traversal: ");
        while (!queue.isEmpty()) {
            int current = queue.poll();//takes next vertex from front of the queue
            System.out.print(current + " ");//prints it

            for (int neighbor : adjList[current]) {//loops through all of the neighbours
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }

    // DFS traversal
    public void DFS(int start) {
        boolean[] visited = new boolean[vertices];
        System.out.print("DFS traversal: ");
        DFSUtil(start, visited);
        System.out.println();
    }

    private void DFSUtil(int v, boolean[] visited) {//a helper method for a recursive DFS
        visited[v] = true;
        System.out.print(v + " ");

        for (int neighbor : adjList[v]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);//this continues deep down the path until all neighbours have been visited; then it backtracks
            }
        }
    }
// Main method for testing
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices and edges: ");
        int n = sc.nextInt();
        int e = sc.nextInt();

        GraphLab1 graph = new GraphLab1(n);

        //enter the number of edges
        System.out.println("Enter " + e + " edges (u v):");
        for (int i = 0; i < e; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            graph.addEdge(u, v);
        }

        // Print adjacent vertices for all
        for (int i = 0; i < n; i++) {
            graph.printAdjVertices(i);
            System.out.println("Degree of vertex " + i + ": " + graph.degreeVertex(i));
        }

        //Finds which node the traversial will start from
        System.out.println("Enter the starting vertex for the traversal: ");
        int start = sc.nextInt();

        graph.BFS(start); // Starting BFS 
        graph.DFS(start); // Starting DFS
    }
}
